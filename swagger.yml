openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/bezpravil/tansultant-api/1.0.0
  - description: Development Stage
    url: http://164.92.253.116:8080
info:
  version: "1.0.0"
  title: Tansultant CRM API
  description: >-
    Documentation for Tansultant API
tags:
  - name: Auth
    description: >-
      Авторизация и регистрация
  - name: AdminApi
    description: >-
      Непубличный АПИ для управления системой
  - name: StudentApi
    description: >-
      АПИ для клиентского приложения
  - name: PublicApi
    description: >-
      Публичный АПИ для сайта и приложений
  - name: People
    description: >-
      Пользователи, студенты, преподаватели и профили
  - name: Branches
    description: >-
      Филиалы и залы
  - name: Courses
    description: >-
      Курсы (классы) и расписание
security:
  - bearerAuth: []
components:
  parameters:
    Page:
      description: Номер страницы
      name: page
      in: query
      schema:
        type: integer
        nullable: true
        default: 1
        example: 1
    PerPage:
      description: Количество записей на странице
      name: per_page
      in: query
      schema:
        type: integer
        nullable: true
        default: 50
        example: 50
    Sort:
      description: Критерий для сортировки
      name: sort
      in: query
      schema:
        type: string
        nullable: true
        default: 'id'
        example: 'id'
    Order:
      description: Направление сортировки
      name: order
      in: query
      schema:
        type: string
        enum: [asc, desc]
        nullable: true
        default: 'asc'
    FilterByName:
      description: Фильтровать по имени
      name: query
      in: query
      schema:
        type: string
        nullable: true
    FilterByUserStatus:
      description: Фильтровать по статусу пользователя
      name: status
      in: query
      schema:
        type: string
        enum: [pending, approved, disabled]
        nullable: true
    FilterByCourseStatus:
      description: Фильтровать по статусу курса
      name: status
      in: query
      schema:
        type: string
        enum: [pending, active, disabled]
        nullable: true
    FilterByInstructorId:
      description: Фильтровать по инструктору
      name: instructor_id
      in: query
      schema:
        type: string
        format: uuid
        nullable: true
    CourseId:
      description: ID курса
      name: course_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    ScheduleId:
      description: ID курса
      name: schedule_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    BranchId:
      description: ID филиала
      name: branch_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    ClassroomId:
      description: ID аудитории (зала)
      name: classroom_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    NewsId:
      description: ID новости
      name: news_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    SuggestList:
      description: Список для автоподстановки
      type: object
      properties:
        data:
          type: array
          description: Список профайлов
          items:
            type: object
            properties:
              label:
                type: string
                description: Отображаемое значение
              value:
                type: string
                format: uuid
                description: Ключ (идентификатор)
    Token:
      description: Токен доступа
      type: object
      properties:
        id:
          type: string
          description: ID токена
        user_id:
          type: string
          format: uuid
          description: ID пользователя
        client_id:
          type: string
          description: ID oauth-клиента
        name:
          type: string
          description: Имя пользователя
        scopes:
          type: array
          description: Скоупы
          items:
            type: string
        revoked:
          type: boolean
          description: Отозван?
        created_at:
          type: string
          format: date-time
          description: Дата создания
        updated_at:
          type: string
          format: date-time
          description: Дата изменения
        expires_at:
          type: string
          format: date-time
          description: Дата истечения срока действия
    PaginationMeta:
      description: Мета-данные о состоянии пагинации
      type: object
      properties:
        current_page:
          type: integer
          example: 1
          description: Текущая страница
        per_page:
          type: integer
          example: 20
          description: Записей на странице
        last_page:
          type: integer
          example: 115
          description: Последняя страница
        from:
          type: integer
          example: 1
          description: Порядковый номер начальной записи на текущей странице
        to:
          type: integer
          example: 20
          description: Порядковый номер последней записи на текущей странице
        total:
          type: integer
          example: 2300
          description: Всего записей
    Person:
      type: object
      description: Профиль
      required:
        - id
        - name
        - phone
        - last_name
        - first_name
        - patrinymic_name
        - gender
        - birth_date
        - age
        - is_user
        - is_student
        - is_instructor
        - is_customer
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          description: ID профиля
        name:
          type: string
          description: Отображаемое имя
          example: Роман Александрович Доц
        phone:
          type: string
          format: phone
          description: Номер телефона
          example: '79996339777'
        email:
          type: string
          format: email
          description: Адрес электронной почты
          example: ram.d.kreiz@gmail.com
        last_name:
          type: string
          description: Фамилия
          example: Доц
        first_name:
          type: string
          description: Имя
          example: Роман
        patrinymic_name:
          type: string
          description: Отчество
          example: Александрович
        gender:
          type: string
          enum: [male, female]
          description: Пол
        birth_date:
          type: string
          format: date
          description: Дата рождения
        age:
          type: integer
          description: Возраст
          example: 34
        picture:
          description: Адрес фотографии
          type: string
          format: url
          example: https://via.placeholder.com/600
        picture_thumb:
          description: Адрес превью фотографии
          type: string
          format: url
          example: https://via.placeholder.com/200
        instagram_username:
          description: Юзернейм в Инстаграм
          type: string
        telegram_username:
          description: Юзернейм в Телеграме
          type: string
        vk_uid:
          description: ID пользователя в VK
          type: string
        facebook_uid:
          description: ID пользователя в Facebook
          type: string
        note:
          description: Текстовая заметка о профиле
          type: string
        is_user:
          type: boolean
          description: Явялется пользователем системы?
        is_student:
          type: boolean
          description: Явялется студентом?
        is_customer:
          type: boolean
          description: Явялется плательщиком?
        is_instructor:
          type: boolean
          description: Явялется преподавателем?
        user_id:
          type: string
          format: uuid
          nullable: true
          description: ID пользователя системы
        student_id:
          type: string
          format: uuid
          nullable: true
          description: ID студента
        customer_id:
          type: string
          format: uuid
          nullable: true
          description: ID плательщика (клиента)
        instructor_id:
          type: string
          format: uuid
          nullable: true
          description: ID преподавателя
        created_at:
          type: string
          format: date-time
          description: Дата создания
        updated_at:
          type: string
          format: date-time
          description: Дата изменения
    StorePerson:
      type: object
      description: Данные профиля
      required:
        - phone
        - last_name
        - first_name
        - patrinymic_name
        - gender
        - birth_date
      properties:
        phone:
          type: string
          format: phone
          description: Номер телефона
          example: '79996339777'
        email:
          type: string
          format: email
          description: Адрес электронной почты
          example: ram.d.kreiz@gmail.com
        last_name:
          type: string
          description: Фамилия
          example: Доц
        first_name:
          type: string
          description: Имя
          example: Роман
        patrinymic_name:
          type: string
          description: Отчество
          example: Александрович
        gender:
          type: string
          enum: [male, female]
          description: Пол
        birth_date:
          type: string
          format: date
          description: Дата рождения
        instagram_username:
          description: Юзернейм в Инстаграм
          type: string
        telegram_username:
          description: Юзернейм в Телеграме
          type: string
        vk_uid:
          description: ID пользователя в VK
          type: string
        facebook_uid:
          description: ID пользователя в Facebook
          type: string
    User:
      type: object
      description: Пользователь системы
      required:
        - id
        - name
        - username
        - person
        - is_instructor
        - is_student
        - is_customer
        - roles
        - permissions
        - created_at
        - updated_at
        - status
      properties:
        id:
          description: ID пользователя
          format: uuid
          type: string
        name:
          description: Отображаемое имя пользователя
          type: string
          example: Роман Доц
        username:
          description: Логин пользователя
          type: string
          example: '79996339777'
        is_instructor:
          description: Пользователь - преподаватель?
          type: boolean
        is_student:
          description: Пользователь - студент?
          type: boolean
        is_customer:
          description: Пользователь - плательщик?
          type: boolean
        person:
          $ref: '#/components/schemas/Person'
        roles:
          description: Список ролей пользователя
          type: array
          items:
            type: string
            example: manager
            description: Роль
        permissions:
          description: Список прав пользователя
          type: array
          items:
            type: string
            example: view-schedule
            description: Право
        created_at:
          description: Дата создания
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          description: Дата изменения
        approved_at:
          description: Дата подтверждения
          type: string
          format: date-time
        seen_at:
          description: Дата последнего появления в сети
          type: string
          format: date-time
        status:
          description: Статус пользователя
          type: string
          enum: [pending, approved, disabled]
          example: approved
    Student:
      type: object
      description: Студент
      required:
        - id
        - name
        - person
        - customer
        - status
        - status_label
        - created_at
      properties:
        id:
          description: ID пользователя
          format: uuid
          type: string
        name:
          description: Отображаемое имя пользователя
          type: string
          example: Роман Доц
        person:
          $ref: '#/components/schemas/Person'
        customer:
          $ref: '#/components/schemas/Customer'
        card_number:
          description: Номер карты студента
          type: string
          example: '9999'
        status:
          description: Статус студента
          type: string
          enum: [potential, active, recent, former]
          example: active
        status_label:
          description: Название статуса
          type: string
          enum: [Потенциальный, Действующий, Недавний, Бывший]
        created_at:
          description: Дата создания
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          description: Дата изменения
        seen_at:
          description: Дата последнего появления в сети
          type: string
          format: date-time
    Customer:
      type: object
      description: Плательщик (клиент)
      required:
        - id
        - name
        - person
        - contract
        - created_at
      properties:
        id:
          description: ID пользователя
          format: uuid
          type: string
        name:
          description: Отображаемое имя пользователя
          type: string
          example: Роман Доц
        person:
          $ref: '#/components/schemas/Person'
        contract:
          $ref: '#/components/schemas/Contract'
        created_at:
          description: Дата создания
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          description: Дата изменения
        seen_at:
          description: Дата последнего появления в сети
          type: string
          format: date-time
    Contract:
      description: Договор с клиентом
      type: object
    Instructor:
      type: object
      description: Преподаватель (инструктор)
      required:
        - id
        - name
        - person
        - display
        - status
        - status_label
        - permissions
        - seen_at
        - created_at
      properties:
        id:
          description: ID пользователя
          format: uuid
          type: string
        name:
          description: Отображаемое имя пользователя
          type: string
          example: Роман Доц
        person:
          $ref: '#/components/schemas/Person'
        description:
          description: Описание (био)
          type: string
          example: Классный преподаватель
        picture:
          description: Адрес фотографии
          type: string
          format: url
          example: https://via.placeholder.com/600
        display:
          description: Отображать?
          type: boolean
        status:
          description: Статус преподавателя
          type: string
          enum: [hired, freelance, fired]
          example: active
        status_label:
          description: Название статуса
          type: string
          enum: [В штате, Вне штата, Уволен]
        permissions:
          description: Список прав преподавателя
          type: array
          items:
            type: string
            example: view-schedule
            description: Право
        created_at:
          description: Дата создания
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          description: Дата изменения
        seen_at:
          description: Дата последнего появления в сети
          type: string
          format: date-time
    StoreInstructor:
      type: object
      description: Данные инструктора
      required:
        - person_id
        - display
        - status
      properties:
        person_id:
          description: ID профайла
          format: uuid
          type: string
        description:
          description: Описание (био)
          type: string
          example: Классный преподаватель
        display:
          description: Отображать в списках?
          type: boolean
        status:
          description: Статус преподавателя
          type: string
          enum: [hired, freelance, fired]
          example: active
    Course:
      type: object
      description: Курс (класс)
      required:
        - id
        - name
        - status
        - status_label
        - display
        - instructor
        - schedules
        - schedule_string
      properties:
        id:
          description: ID курса
          format: uuid
          type: string
        name:
          description: Название класса
          type: string
          example: Dancehall
        status:
          description: Статус класса
          type: string
          enum: [pending, active, disabled]
          example: active
        status_label:
          description: Название статуса
          type: string
          enum: [Идёт набор, Работает, Закрыт]
          example: Работает
        summary:
          description: Короткое описание курса (тизер)
          type: string
          example: Описание курса в две-три строки
        description:
          description: Полное описание
          type: string
          example: Полное и подробное описание курса
        picture:
          description: Адрес картинки класса
          type: string
          format: url
          example: https://via.placeholder.com/600
        picture_thumb:
          description: Адрес превью картинки класса
          type: string
          format: url
          example: https://via.placeholder.com/200
        display:
          description: Отображать?
          type: boolean
          example: true
        age_restrictions:
          description: Возрастные ограничения
          type: object
          properties:
            from:
              type: integer
              nullable: true
              description: От
              example: 3
            to:
              type: integer
              nullable: true
              description: До
              example:
        age_restrictions_string:
          description: Возрастные ограничения (текстовое отображение)
          type: string
          example: 3+
        instructor:
          $ref: '#/components/schemas/Instructor'
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
        schedule_string:
          description: Расписание класса одной строкой
          type: string
          nullable: true
          example: 'ПН, ВТ в 18:00'
        created_at:
          description: Дата создания
          type: string
          format: date-time
          example: 2020-02-20 00:00:00+004UTC
        updated_at:
          type: string
          format: date-time
          description: Дата изменения
          example: 2020-02-20 00:00:00+004UTC
        seen_at:
          description: Дата последнего появления в сети
          type: string
          format: date-time
          example: 2020-02-20 00:00:00+004UTC
    Schedule:
      description: Ячейка расписания
      type: object
      required:
        - id
        - weekday
        - starts_at
        - ends_at
      properties:
        id:
          description: ID ячейки расписания
          type: string
          format: uuid
        weekday:
          type: string
          enum: ['1', '2', '3', '4', '5', '6', '7']
          description: День недели
          example: 1
        branch:
          $ref: '#/components/schemas/Branch'
        classroom:
          $ref: '#/components/schemas/Classroom'
        starts_at:
          type: string
          format: time
          description: Дата начала работы класса
          example: '18:00'
        ends_at:
          type: string
          format: time
          description: Дата окончания работы класса
          example: '19:00'
    Branch:
      description: Филиал
      type: object
      required:
        - id
        - name
        - number
        - created_at
        - updated_at
      properties:
        id:
          description: ID филиала
          type: string
          format: uuid
        name:
          type: string
          description: Название филиала
          example: Плаза
        summary:
          type: string
          description: Короткое описание филиала
          example: Короткое описание филиала
          nullable: true
        description:
          type: string
          description: Полное описание филала
          example: Полное описание филала
          nullable: true
        phone:
          type: string
          description: Номер телефона
          example: '+7-906-432-77-66'
          nullable: true
        email:
          type: string
          format: email
          description: Адрес электронной почты
          example: mail@bezpravil.net
          nullable: true
        url:
          type: string
          format: url
          description: Адрес сайта или лэндинговой страницы
          example: 'https://bezpravil.net'
          nullable: true
        vk_url:
          type: string
          format: url
          description: Адрес страницы VK
          example: 'https://vk.com/bezpravildance'
          nullable: true
        facebook_url:
          type: string
          format: url
          description: Адрес страницы Facebook
          example: 'https://facebook.com/bezpravil'
          nullable: true
        telegram_username:
          type: string
          description: Телеграм-канал
          example: 'plaza_bezpravil'
          nullable: true
        instagram_username:
          type: string
          description: Инстаграм-аккаунт
          example: 'bezpravildance'
          nullable: true
        address:
          $ref: '#/components/schemas/Address'
        number:
          type: integer
          description: Порядковый номер (для сортировки)
          example: 1
        created_at:
          type: string
          format: date-time
          description: Дата начала работы класса
          example: '2020-02-20 18:00'
        updated_at:
          type: string
          format: date-time
          description: Дата окончания работы класса
          example: '2020-02-20 19:00'
    Address:
      description: Адрес
      type: object
      required:
        - country
        - city
        - street
        - building
        - coordinates
      properties:
        country:
          description: Страна
          type: string
          nullable: true
        city:
          description: Город
          type: string
          nullable: true
        street:
          description: Улица
          type: string
          nullable: true
        building:
          description: Строение
          type: string
          nullable: true
        coordinates:
          description: Координаты (широта, долгота)
          type: array
          nullable: true
          example: [45.006666, 38.256684]
          items:
            type: number
            description: Широта/Долгота
    Classroom:
      description: Аудитория (зал)
      type: object
      required:
        - id
        - name
        - branch
        - number
        - created_at
        - updated_at
      properties:
        id:
          description: ID филиала
          type: string
          format: uuid
        name:
          type: string
          description: Название
          example: Плаза
        branch:
          $ref: '#/components/schemas/Branch'
          nullable: true
        color:
          type: string
          description: Цвет (hex или css-совместимое название)
          example: '#000000'
          nullable: true
        capacity:
          description: Вместимость зала
          type: integer
          example: 25
          nullable: true
        summary:
          type: string
          description: Короткое описание
          example: Короткое описание
          nullable: true
        description:
          type: string
          description: Полное описание
          example: Полное описание
        number:
          type: integer
          description: Порядковый номер (для сортировки)
          example: 1
        created_at:
          type: string
          format: date-time
          description: Дата начала работы класса
          example: '2020-02-20 18:00'
        updated_at:
          type: string
          format: date-time
          description: Дата окончания работы класса
          example: '2020-02-20 19:00'
    PublicNewsList:
      description: Новости
      type: array
      items:
        $ref: '#/components/schemas/PublicNewsEntry'
    PublicNewsEntry:
      description: Новость
      type: object
      properties:
        subject:
          type: string
          description: Заголовок
          example: Новый набор в классе Dance Mix
        text:
          type: string
          description: Текст
          example: >-
            Много текста в качестве тела новости
        attachments:
          type: array
          description: Вложения
          items:
            type: string
            format: url
            example: https://via.placeholder.com/150
            description: Адрес вложения
        tags:
          type: array
          description: Тэги
          items:
            type: string
            description: Тэг
            example: hip-hop
  responses:
    401:
      description: Пользователь не авторизован
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: unauthenticated
    403:
      description: Доступ запрещен
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: access_denied
    404:
      description: Объект не найден
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: entity_not_found
              message:
                type: string
                example: "Не найдено"
              data:
                type: object
                properties:
                  model:
                    type: string
                    example: App\Models\...
                  ids:
                    type: array
                    items:
                      type: string
                      format: uuid
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
paths:
  # Auth routes
  /verify:
    post:
      tags:
        - Auth
      operationId: verifyPhoneNumber
      summary: Верификация номера телефона
      description: >-
        При первом обращении необходимо отправить только номер телефона, чтобы код подтверждения,
        сгенерированный системой был отправлен на этот номер.
        Во втором запросе следует также передать полученный код подтверждения.
        При успешной верификации код будет отмечен как просроченный во избежание повторной проверки,
        а сервер вернет ID кода верификации, который впоследствии необходимо использовать при регистрации или сбросе пароля.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - phone
              properties:
                phone:
                  type: string
                  format: phone
                  example: '79996339777'
                  description: Номер телефона
                verification_code:
                  type: string
                  example: '123456'
                  description: Код подтверждения из СМС
      responses:
        200:
          description: Код подтвержден
        201:
          description: Код отправлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      verification_code_id:
                        type: string
                        format: uuid
                        description: ID кода подтверждения (используется при регистрации нового пользователя)
        400:
          description: >-
            Ошибка отправки сообщения
            или таймаут перед повторной отправкой кода
            или превышено количество попыток
        404:
          description: Код еще не был отправлен или просрочен (см. вложенное сообщение)
        409:
          description: Неверный код подтверждения
  /register:
    post:
      tags:
        - Auth
      summary: Регистрация пользователя
      operationId: registration
      description: >-
        Самостоятельная регистрация любого пользователя системы (менеджера, студента, преподавателя).
        Предварительно нужно вызвать метод подтверждения номера телефона (/verify), чтобы пройти
        процедуру верификации номера телефона и получить ID кода подтверждения, необходимого для регистрации.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_type
                - verification_code_id
                - last_name
                - first_name
                - patrinymic_name
                - gender
                - birth_date
                - password
              properties:
                user_type:
                  type: string
                  enum: ['User', 'Student', 'Instructor']
                  example: student
                  description: Тип регистрации (пользователь, студент, инструктор)
                verification_code_id:
                  type: string
                  format: uuid
                  description: ID кода подтверждения (для верификации номера телефона)
                last_name:
                  type: string
                  description: Фамилия
                  example: Доц
                first_name:
                  type: string
                  description: Имя
                  example: Роман
                patrinymic_name:
                  type: string
                  description: Отчество
                  example: Александрович
                gender:
                  type: string
                  enum: [male, female]
                  description: Пол
                birth_date:
                  type: string
                  format: date
                  description: Дата рождения
                password:
                  type: string
                  description: Пароль
      responses:
        201:
          description: Пользователь зарегистрирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        409:
          description: >-
            Пользователь уже зарегистрирован
            (совпадение по номеру телефона или персональным данным)
        422:
          description: Ошибка валидации (см. вложенное сообщение)
  /auth:
    post:
      operationId: login
      summary: Авторизация (вход в систему)
      description: >-
        Метод осуществляет авторизацию в системе с помощью логина и пароля
        и возвращает oauth2 токен доступа для использования в запросах
        к непубличному АПИ.
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: Логин (номер телефона)
                  type: string
                  example: '79996339777'
                password:
                  description: Пароль
                  type: string
                  example: 'qwerty'
      responses:
        200:
          description: Авторизация успешна
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        $ref: '#/components/schemas/Token'
                      accessToken:
                        description: Access token для дальнейших обращений к непубличной части АПИ
                        type: string
                        example: 'MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3'
                        format: base64
        409:
          description: Ошибка авторизации
    delete:
      operationId: logout
      summary: Сброс авторизации (выход из системы)
      description: Метод отзывает токен авторизованного пользователя
      tags:
        - Auth
      responses:
        200:
          description: Успешно
        401:
          description: Пользователь не авторизован
  /user:
    get:
      operationId: getUser
      summary: Данные пользователя
      description: Метод возвращает данные авторизованного пользователя, включая профиль, роли и права.
      tags:
        - Auth
      responses:
        200:
          description: Успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        401:
          description: Пользователь не авторизован
  /user/password:
    patch:
      operationId: updateUserPassword
      summary: Смена пароля авторизованного пользователя
      description: >-
        Необходимо отправить правильный старый пароль и новый пароль,
        чтобы изменить пароль авторизованного пользователя.
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  description: Старый пароль
                  type: string
                  example: 'querty'
                new_password:
                  description: Новый пароль
                  type: string
                  example: 'ytrewq'
      responses:
        200:
          description: Успешно
        401:
          description: Пользователь не авторизован
        409:
          description: Старый пароль введен неверно
  /reset:
    post:
      operationId: resetUserPassword
      summary: Сброс пароля
      description: >-
        Для сброса пароля необходимо выполнить два запроса к данному методу:

        1. Первый запрос должен содержать только ``username``, по которому будет осуществлен поиск пользователя.
          На номер телефона найденного пользователя будет отправлен код подтверждения.

        2. Второй запрос должен также содержать ``verification_code``.
          При отправке верного кода подтверждения, будет сгенерирован новый пароль и отправлен в СМС.
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
                  example: '79996339777'
                  description: Имя пользователя
                verification_code:
                  type: string
                  example: '123456'
                  description: Код подтверждения из СМС
      responses:
        200:
          description: Пароль сброшен и отправлен в СМС
        201:
          description: Код подтверждения отправлен в СМС
        400:
          description: >-
            Ошибка отправки сообщения
            или таймаут перед повторной отправкой кода
            или превышено количество попыток
        404:
          description: >-
            Пользователь не найден
            или у пользователя нет привязанного номера телефона
            или код подтверждения просрочен (см. вложенное сообщение)
        409:
          description: Неверно указан номер кода подтверждения

  # AdminApi routes
  ## People
  /admin/people:
    get:
      operationId: admin.people.search
      summary: Поиск по профайлам
      description: >-
        Возвращает список профайлов системы с учетом фильтра,
        сортировки и пагинации
      tags:
        - AdminApi
        - People
      parameters:
        - $ref: '#/components/parameters/FilterByName'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Order'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: Список профайлов
                    items:
                      $ref: '#/components/schemas/Person'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
    post:
      operationId: admin.people.store
      summary: Создать профайл
      description: >-
        Валидирует введенные данные, сохраняет новый профайл
        и возвращает данные профайла
      tags:
        - AdminApi
        - People
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorePerson'
      responses:
        201:
          description: Профайл созан
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Person'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
  /admin/people/suggest:
    get:
      operationId: admin.people.suggest
      summary: Автоподстановка для поиска по профайлам
      description: >-
        Возвращает короткий список из первых найденных по поисковому запросу
        профайлов и их идентификаторов
      tags:
        - AdminApi
        - People
      parameters:
        - $ref: '#/components/parameters/FilterByName'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
  /admin/people/{person_id}:
    get:
      operationId: admin.people.show
      summary: Профайл
      description: Возвращает данные профайла
      tags:
        - AdminApi
        - People
      parameters:
        - name: person_id
          in: path
          description: ID профайла
          required: true
          schema:
            type: string
            format: uuid
            example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Person'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
    patch:
      operationId: admin.people.update
      summary: Изменение профайла
      description: >-
        Изменяет профайл и возвращает новые данные
      tags:
        - AdminApi
        - People
      parameters:
        - name: person_id
          in: path
          description: ID профайла
          required: true
          schema:
            type: string
            format: uuid
            example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorePerson'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Person'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
    delete:
      operationId: admin.people.delete
      summary: Удаление профайла
      description: Удаляет профайл
      tags:
        - AdminApi
        - People
      parameters:
        - name: person_id
          in: path
          description: ID профайла
          required: true
          schema:
            type: string
            format: uuid
            example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
      responses:
        200:
          description: Успех
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
  /admin/people/{person_id}/restore:
    post:
      operationId: admin.people.restore
      summary: Восстановление профайла
      description: Восстанавливает удаленный профайл и возвращает его данные
      tags:
        - AdminApi
        - People
      parameters:
        - name: person_id
          in: path
          description: ID профайла
          required: true
          schema:
            type: string
            format: uuid
            example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Person'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'

  ## Instructors
  /admin/instructors:
    get:
      operationId: admin.instructors.search
      summary: Поиск по инструкторам
      description: >-
        Возвращает список инструкторов с учетом фильтра,
        сортировки и пагинации
      tags:
        - AdminApi
        - People
      parameters:
        - $ref: '#/components/parameters/FilterByName'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Order'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: Список инструкторов
                    items:
                      $ref: '#/components/schemas/Instructor'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
    post:
      operationId: admin.instructors.store
      summary: Создать инструктора
      description: >-
        Валидирует введенные данные, сохраняет новую запись
        и возвращает данные инструктора
      tags:
        - AdminApi
        - People
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreInstructor'
      responses:
        201:
          description: Профайл созан
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Instructor'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
  /admin/instructors/suggest:
    get:
      operationId: admin.instructors.suggest
      summary: Автоподстановка для поиска по инструкторам
      description: >-
        Возвращает короткий список из первых найденных по поисковому запросу
        инструкторов и их идентификаторов
      tags:
        - AdminApi
        - People
      parameters:
        - $ref: '#/components/parameters/FilterByName'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestList'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
  /admin/instructors/{instructor_id}:
    get:
      operationId: admin.instructors.show
      summary: Инструктор
      description: Возвращает данные инструктора
      tags:
        - AdminApi
        - People
      parameters:
        - name: instructor_id
          in: path
          description: ID инструктора
          required: true
          schema:
            type: string
            format: uuid
            example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Instructor'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
    patch:
      operationId: admin.instructors.update
      summary: Изменение инструктора
      description: >-
        Изменяет профайл и возвращает новые данные
      tags:
        - AdminApi
        - People
      parameters:
        - name: instructor_id
          in: path
          description: ID инструктора
          required: true
          schema:
            type: string
            format: uuid
            example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreInstructor'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Instructor'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
    delete:
      operationId: admin.instructors.delete
      summary: Удаление инструктора
      description: Удаляет инструктора
      tags:
        - AdminApi
        - People
      parameters:
        - name: instructor_id
          in: path
          description: ID инструктора
          required: true
          schema:
            type: string
            format: uuid
            example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
      responses:
        200:
          description: Успех
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
  /admin/instructors/{instructor_id}/restore:
    post:
      operationId: admin.instructors.restore
      summary: Восстановление инструктора
      description: Восстанавливает удаленного инструктора и возвращает его данные
      tags:
        - AdminApi
        - People
      parameters:
        - name: instructor_id
          in: path
          description: ID инструктора
          required: true
          schema:
            type: string
            format: uuid
            example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Instructor'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
  ## Users
  /admin/users:
    get:
      operationId: adminGetUsers
      summary: Список пользователей
      description: >-
        Возвращает список пользователей системы с учетом фильтра,
        сортировки и пагинации
      tags:
        - AdminApi
        - People
      parameters:
        - $ref: '#/components/parameters/FilterByUserStatus'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Order'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: Список пользователей
                    items:
                      $ref: '#/components/schemas/User'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        401:
          $ref: '#/components/responses/401'
        403:
          description: Доступ запрещен
        422:
          description: Ошибка валидации (для фильтров)
  /admin/users/{user_id}:
    get:
      operationId: adminGetUser
      summary: Данные пользователя
      description: >-
        Возвращает полные данные пользователя системы
      tags:
        - AdminApi
        - People
      parameters:
        - name: user_id
          in: path
          description: ID пользователя
          required: true
          schema:
            type: string
            format: uuid
            example: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Запись не найдена

  # AdminApi routes
  ## Courses
  /admin/courses:
    get:
      operationId: adminListCourses
      tags:
        - AdminApi
        - Courses
      summary: Список курсов
      description: Метод возвращает список курсов с учетом фильтра, пагинации и сортировки
      parameters:
        - $ref: '#/components/parameters/FilterByCourseStatus'
        - $ref: '#/components/parameters/FilterByInstructorId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Order'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        422:
          description: Ошибка валидации (в значениях фильтра)
    post:
      operationId: adminStoreCourse
      tags:
        - AdminApi
        - Courses
      summary: Создание курса
      description: Метод создаёт новый курс и возвращает созданный объект
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Название
                  example: Dancehall
                status:
                  type: string
                  enum: [pending, active, disabled]
                  description: Статус
                  example: active
                  default: pending
                  nullable: true
                summary:
                  type: string
                  description: Короткое описание
                  nullable: true
                description:
                  type: string
                  description: Полное описание
                  nullable: true
                display:
                  type: string
                  description: Отображать?
                  nullable: true
                  default: false
                age_restrictions_from:
                  type: integer
                  description: Возрастное ограничение от
                  example: 3
                  nullable: true
                age_restrictions_to:
                  type: integer
                  description: Возрастное ограничение до
                  example:
                  nullable: true
                instructor_id:
                  type: string
                  format: uuid
                  nullable: true
                  description: ID инструктора
                starts_at:
                  type: string
                  format: date
                  nullable: true
                  description: Дата начала работы класса
                  example: 2020-02-20
                ends_at:
                  type: string
                  format: date
                  nullable: true
                  description: Дата окончания работы класса
                  example:
      responses:
        201:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Course'
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        409:
          description: Недопустимый статус инструктора (см. вложенное сообщение)
        422:
          description: Ошибка валидации (см. вложенное сообщение)
  /admin/courses/{course_id}:
    get:
      operationId: adminGetCourse
      tags:
        - AdminApi
        - Courses
      summary: Данные курса (класса)
      description: Метод возвращает объект курса (класса) по указанному ID
      parameters:
        - $ref: '#/components/parameters/CourseId'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Course'
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Запись не найдена
    put:
      operationId: adminUpdateCourse
      tags:
        - AdminApi
        - Courses
      summary: Изменение курса (класса)
      description: Метод обновляет данные курса (класса)
      parameters:
        - $ref: '#/components/parameters/CourseId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Название
                  example: Dancehall
                status:
                  type: string
                  enum: [pending, active, disabled]
                  description: Статус
                  default: pending
                  example: active
                summary:
                  type: string
                  description: Короткое описание
                  nullable: true
                description:
                  type: string
                  description: Полное описание
                  nullable: true
                display:
                  type: string
                  description: Отображать?
                  nullable: true
                  default: false
                age_restrictions_from:
                  type: integer
                  description: Возрастное ограничение от
                  example: 3
                  nullable: true
                age_restrictions_to:
                  type: integer
                  description: Возрастное ограничение до
                  example:
                  nullable: true
                instructor_id:
                  type: string
                  format: uuid
                  nullable: true
                  description: ID инструктора
                starts_at:
                  type: string
                  format: date
                  nullable: true
                  description: Дата начала работы класса
                  example: 2020-02-20
                ends_at:
                  type: string
                  format: date
                  nullable: true
                  description: Дата окончания работы класса
                  example:
      responses:
        200:
          description: Успех
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Запись не найдена
        409:
          description: Недопустимый статус инструктора (см. вложенное сообщение)
        422:
          description: Ошибка валидации (см. вложенное сообщение)
    delete:
      operationId: adminDeleteCourse
      tags:
        - AdminApi
        - Courses
      summary: Удаление курса (класса)
      description: Метод отмечает курс как удаленный (soft delete)
      parameters:
        - $ref: '#/components/parameters/CourseId'
      responses:
        200:
          description: Курс удален
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Курс не найден
  /admin/courses/{course_id}/restore:
    post:
      operationId: adminRestoreCourse
      tags:
        - AdminApi
        - Courses
      summary: Восстановление удаленного курса (класса)
      description: Метод убирает отметку от удалении курса
      parameters:
        - $ref: '#/components/parameters/CourseId'
      responses:
        200:
          description: Курс восстановлен
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Курс не найден или не удален
  /admin/courses/{course_id}/disable:
    post:
      operationId: adminDisableCourse
      tags:
        - AdminApi
        - Courses
      summary: Отключение курса (класса)
      description: Метод меняет статус курса на *Закрыт*
      parameters:
        - $ref: '#/components/parameters/CourseId'
      responses:
        200:
          description: Курс отключен
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Курс не найден или удален
  /admin/courses/{course_id}/enable:
    post:
      operationId: adminEnableCourse
      tags:
        - AdminApi
        - Courses
      summary: Включение курса (класса)
      description: Метод меняет статус курса на *Работает*
      parameters:
        - $ref: '#/components/parameters/CourseId'
      responses:
        200:
          description: Курс включен
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Курс не найден или удален

  ## Schedules
  /admin/courses/{course_id}/schedules:
    get:
      operationId: adminListCourseSchedules
      tags:
        - AdminApi
        - Courses
      summary: Расписание класса
      description: Метод возвращает список ячеек расписания для выбранного класса
      parameters:
        - $ref: '#/components/parameters/CourseId'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Schedule'
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Курс не найден
    post:
      operationId: adminStoreSchedule
      tags:
        - AdminApi
        - Courses
      summary: Создание ячейки расписания для курса
      description: Метод создаёт новую ячейку расписания для выбранного курса
      parameters:
        - $ref: '#/components/parameters/CourseId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - weekday
                - course_id
                - starts_at
                - ends_at
              properties:
                weekday:
                  type: string
                  enum: ['1', '2', '3', '4', '5', '6', '7']
                  description: День недели
                  example: 1
                branch_id:
                  type: string
                  format: uuid
                  description: ID филиала
                  nullable: true
                classroom_id:
                  type: string
                  format: uuid
                  description: ID аудитории (место проведения)
                  nullable: true
                course_id:
                  type: string
                  format: uuid
                  description: ID курса
                starts_at:
                  type: string
                  format: time
                  description: Дата начала работы класса
                  example: '18:00'
                ends_at:
                  type: string
                  format: time
                  description: Дата окончания работы класса
                  example: '19:00'
      responses:
        201:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Schedule'
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Курс не найден
        409:
          description: Выбранное время и место уже заняты
        422:
          description: Ошибка валидации (см. вложенное сообщение)
  /admin/courses/{course_id}/schedules/{schedule_id}:
    put:
      operationId: adminUpdateSchedule
      tags:
        - AdminApi
        - Courses
      summary: Изменение ячейки расписани
      description: Метод обновляет ячейку расписания
      parameters:
        - $ref: '#/components/parameters/CourseId'
        - $ref: '#/components/parameters/ScheduleId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - weekday
                - course_id
                - starts_at
                - ends_at
              properties:
                weekday:
                  type: string
                  enum: ['1', '2', '3', '4', '5', '6', '7']
                  description: День недели
                  example: 1
                branch_id:
                  type: string
                  format: uuid
                  description: ID филиала
                  nullable: true
                classroom_id:
                  type: string
                  format: uuid
                  description: ID аудитории (место проведения)
                  nullable: true
                course_id:
                  type: string
                  format: uuid
                  description: ID курса
                starts_at:
                  type: string
                  format: time
                  description: Дата начала работы класса
                  example: '18:00'
                ends_at:
                  type: string
                  format: time
                  description: Дата окончания работы класса
                  example: '19:00'
      responses:
        200:
          description: Ячейка изменена
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Ячейка расписания не найдена
        409:
          description: Время и место занято
        422:
          description: Ошибка валидации (см. вложенное сообщение)
    delete:
      operationId: adminDeleteSchedule
      tags:
        - AdminApi
        - Courses
      summary: Удаление ячейки расписания
      description: Метод удаляет ячейку расписания
      parameters:
        - $ref: '#/components/parameters/CourseId'
        - $ref: '#/components/parameters/ScheduleId'
      responses:
        200:
          description: Ячейка расписания удалена
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Ячейка расписания не найдена

  ## Branches
  /admin/branches:
    get:
      operationId: adminListBranches
      tags:
        - AdminApi
        - Branches
      summary: Список филиалов
      description: Метод возвращает список всех филиалов
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Branch'
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
    post:
      operationId: adminStoreBranch
      tags:
        - AdminApi
        - Branches
      summary: Создание филиала
      description: Метод создаёт новый филиал и возвращает созданный объект
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Название филиала
                  example: Плаза
                summary:
                  type: string
                  description: Короткое описание филиала
                  example: Короткое описание филиала
                  nullable: true
                description:
                  type: string
                  description: Полное описание филала
                  example: Полное описание филала
                  nullable: true
                phone:
                  type: string
                  description: Номер телефона
                  example: '+7-906-432-77-66'
                  nullable: true
                email:
                  type: string
                  format: email
                  description: Адрес электронной почты
                  example: mail@bezpravil.net
                  nullable: true
                url:
                  type: string
                  format: url
                  description: Адрес сайта или лэндинговой страницы
                  example: 'https://bezpravil.net'
                  nullable: true
                vk_url:
                  type: string
                  format: url
                  description: Адрес страницы VK
                  example: 'https://vk.com/bezpravildance'
                  nullable: true
                facebook_url:
                  type: string
                  format: url
                  description: Адрес страницы Facebook
                  example: 'https://facebook.com/bezpravil'
                  nullable: true
                telegram_username:
                  type: string
                  description: Телеграм-канал
                  example: 'plaza_bezpravil'
                  nullable: true
                instagram_username:
                  type: string
                  description: Инстаграм-аккаунт
                  example: 'bezpravildance'
                  nullable: true
                address:
                  $ref: '#/components/schemas/Address'
                  nullable: true
                number:
                  type: integer
                  description: Порядковый номер (для сортировки)
                  example: 1
                  nullable: true
      responses:
        201:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Branch'
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        422:
          description: Ошибка валидации (см. вложенное сообщение)
  /admin/branches/{branch_id}:
    get:
      operationId: adminGetBranch
      tags:
        - AdminApi
        - Branches
      summary: Данные филиала
      description: Метод возвращает объект филиала по указанному ID
      parameters:
        - $ref: '#/components/parameters/BranchId'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Branch'
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Запись не найдена
    put:
      operationId: adminUpdateBranch
      tags:
        - AdminApi
        - Branches
      summary: Изменение филиала
      description: Метод обновляет данные филиала
      parameters:
        - $ref: '#/components/parameters/BranchId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Название филиала
                  example: Плаза
                summary:
                  type: string
                  description: Короткое описание филиала
                  example: Короткое описание филиала
                  nullable: true
                description:
                  type: string
                  description: Полное описание филала
                  example: Полное описание филала
                  nullable: true
                phone:
                  type: string
                  description: Номер телефона
                  example: '+7-906-432-77-66'
                  nullable: true
                email:
                  type: string
                  format: email
                  description: Адрес электронной почты
                  example: mail@bezpravil.net
                  nullable: true
                url:
                  type: string
                  format: url
                  description: Адрес сайта или лэндинговой страницы
                  example: 'https://bezpravil.net'
                  nullable: true
                vk_url:
                  type: string
                  format: url
                  description: Адрес страницы VK
                  example: 'https://vk.com/bezpravildance'
                  nullable: true
                facebook_url:
                  type: string
                  format: url
                  description: Адрес страницы Facebook
                  example: 'https://facebook.com/bezpravil'
                  nullable: true
                telegram_username:
                  type: string
                  description: Телеграм-канал
                  example: 'plaza_bezpravil'
                  nullable: true
                instagram_username:
                  type: string
                  description: Инстаграм-аккаунт
                  example: 'bezpravildance'
                  nullable: true
                address:
                  $ref: '#/components/schemas/Address'
                  nullable: true
                number:
                  type: integer
                  description: Порядковый номер (для сортировки)
                  example: 1
                  nullable: true
      responses:
        200:
          description: Успех
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Запись не найдена
        409:
          description: Недопустимый статус инструктора (см. вложенное сообщение)
        422:
          description: Ошибка валидации (см. вложенное сообщение)
    delete:
      operationId: adminDeleteBranch
      tags:
        - AdminApi
        - Courses
      summary: Удаление филиала
      description: Метод отмечает филиал как удаленный (soft delete)
      parameters:
        - $ref: '#/components/parameters/BranchId'
      responses:
        200:
          description: Филиал удален
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Филиал не найден
  /admin/branches/{branch_id}/restore:
    post:
      operationId: adminRestoreBranch
      tags:
        - AdminApi
        - Branches
      summary: Восстановление филилала
      description: Метод восстанавливает удаленный филиал
      parameters:
        - $ref: '#/components/parameters/BranchId'
      responses:
        200:
          description: Филиал восстановлен
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Удаленный филиал не найдена

  ## Classrooms
  /admin/branches/{branch_id}/classrooms:
    get:
      operationId: adminListBranchClassrooms
      tags:
        - AdminApi
        - Branches
      summary: Залы (аудитории) филиала
      description: Метод возвращает список залов для выбранного филиала
      parameters:
        - $ref: '#/components/parameters/BranchId'
      responses:
        200:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Classroom'
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Филиал не найден
    post:
      operationId: adminStoreBranchClassroom
      tags:
        - AdminApi
        - Branches
      summary: Создание зала для филиала
      description: Метод создаёт новую аудиторию (зал) для выбранного филиала
      parameters:
        - $ref: '#/components/parameters/BranchId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Название
                  example: Плаза
                color:
                  type: string
                  description: Цвет (hex или css-совместимое название)
                  example: '#000000'
                  nullable: true
                capacity:
                  description: Вместимость зала
                  type: integer
                  example: 25
                  nullable: true
                summary:
                  type: string
                  description: Короткое описание
                  example: Короткое описание
                  nullable: true
                description:
                  type: string
                  description: Полное описание
                  example: Полное описание
                  nullable: true
                number:
                  type: integer
                  description: Порядковый номер (для сортировки)
                  example: 1
                  nullable: true
      responses:
        201:
          description: Успех
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Classroom'
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Филиал не найден
        422:
          description: Ошибка валидации (см. вложенное сообщение)
  /admin/branches/{branch_id}/classrooms/{classroom_id}:
    put:
      operationId: adminUpdateBranchClassroom
      tags:
        - AdminApi
        - Branches
      summary: Изменение зала
      description: Метод обновляет данные зала
      parameters:
        - $ref: '#/components/parameters/BranchId'
        - $ref: '#/components/parameters/ClassroomId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Название
                  example: Плаза
                color:
                  type: string
                  description: Цвет (hex или css-совместимое название)
                  example: '#000000'
                  nullable: true
                capacity:
                  description: Вместимость зала
                  type: integer
                  example: 25
                  nullable: true
                summary:
                  type: string
                  description: Короткое описание
                  example: Короткое описание
                  nullable: true
                description:
                  type: string
                  description: Полное описание
                  example: Полное описание
                  nullable: true
                number:
                  type: integer
                  description: Порядковый номер (для сортировки)
                  example: 1
                  nullable: true
      responses:
        200:
          description: Данные зала обновлены
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Зал не найден
        422:
          description: Ошибка валидации (см. вложенное сообщение)
    delete:
      operationId: adminDeleteBranchClassroom
      tags:
        - AdminApi
        - Branches
      summary: Удаление зала
      description: Метод удаляет зал
      parameters:
        - $ref: '#/components/parameters/BranchId'
        - $ref: '#/components/parameters/ClassroomId'
      responses:
        200:
          description: Зал удален
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Зал не найдена
  /admin/branches/{branch_id}/classrooms/{classroom_id}/restore:
    post:
      operationId: adminRestoreBranchClassroom
      tags:
        - AdminApi
        - Branches
      summary: Восстановление зала
      description: Метод восстанавливает удаленный зал
      parameters:
        - $ref: '#/components/parameters/BranchId'
        - $ref: '#/components/parameters/ClassroomId'
      responses:
        200:
          description: Зал восстановлен
        401:
          description: Пользователь не авторизован
        403:
          description: Доступ запрещен
        404:
          description: Удаленный зал не найдена

  # Public routes
  /news:
    get:
      tags:
        - Public
      summary: Список последних новостей
      description: >-
        Возвращает все новости в обратном хронологическом порядке с учетом
        пагинации, сортировки и фильтров
      operationId: getNewsIndex
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Order'
      responses:
        200:
          description: Последние новости
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PublicNewsList'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
  /news/{news_id}:
    get:
      tags:
        - Public
      summary: Полная запись новости
      description: Возвращает объект новости со всеми вложениями, тегами, лайками и просмотрами
      operationId: getNewsEntry
      parameters:
        - $ref: '#/components/parameters/NewsId'
      responses:
        200:
          description: Данные новости
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PublicNewsEntry'
        404:
          description: Новость не найдена