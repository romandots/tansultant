<?php

declare(strict_types=1);

namespace App\Components\Tariff;

use App\Common\BaseComponentService;
use App\Common\Contracts;
use App\Models\Course;
use App\Models\Enum\CourseStatus;
use App\Models\Enum\TariffStatus;
use App\Models\Tariff;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;

/**
 * @method Repository getRepository()
 */
class Service extends BaseComponentService
{
    public function __construct()
    {
        parent::__construct(
            Tariff::class,
            Repository::class,
            Dto::class,
            null
        );
    }

    public function create(Contracts\DtoWithUser $dto): Model
    {
        return parent::create($dto); // TODO: Change the autogenerated stub
    }


    public function update(Model $record, Contracts\DtoWithUser $dto): void
    {
        $this->checkIfTariffHasActiveSubscriptions($record);

        parent::update($record, $dto); // TODO: Change the autogenerated stub
    }

    /**
     * @param Tariff $tariff
     * @return void
     * @throws Exceptions\TariffHasActiveSubscriptions
     * @todo Implement throw TariffHasActiveSubscriptions exception if tariff has active subscriptions
     */
    private function checkIfTariffHasActiveSubscriptions(Tariff $tariff): void
    {
    }

    public function archive(Tariff $tariff): void
    {
        $this->getRepository()->updateStatus($tariff, TariffStatus::ARCHIVED);
        $this->debug('Archive tariff');
    }

    public function activate(Tariff $tariff): void
    {
        $this->getRepository()->updateStatus($tariff, TariffStatus::ACTIVE);
        $this->debug('Activate tariff');
    }

    /**
     * @param Tariff $tariff
     * @param iterable<Course> $courses
     * @param User|null $user
     * @return void
     * @throws \Exception
     * @throws Exceptions\CannotAttachDisabledCourse
     */
    public function attachCourses(Tariff $tariff, iterable $courses, ?User $user): void
    {
        if ($tariff->status !== TariffStatus::ACTIVE) {
            throw new Exceptions\CannotAttachArchivedTariff($tariff);
        }

        foreach ($courses as $course) {
            if ($course->status === CourseStatus::DISABLED) {
                throw new Exceptions\CannotAttachDisabledCourse($course);
            }
        }

        $originalRecord = clone $tariff;
        $this->getRepository()->attachCourses($tariff, $courses);
        $this->debug("Attach courses to tariff {$tariff->name}", (array)$courses);
        if ($user) {
            $this->history->logUpdate($user, $tariff, $originalRecord);
        }
    }

    /**
     * @param Tariff $tariff
     * @param iterable<Course> $courses
     * @param User $user
     * @return void
     * @throws \Exception
     */
    public function detachCourses(Tariff $tariff, iterable $courses, User $user): void
    {
        $originalRecord = clone $tariff;
        $this->getRepository()->detachCourses($tariff, $courses);
        $this->debug("Detach courses from tariff {$tariff->name}", (array)$courses);
        $this->history->logUpdate($user, $tariff, $originalRecord);
    }

}